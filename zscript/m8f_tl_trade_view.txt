
class m8f_tl_ScreenSize
{
  int width;
  int height;
}

class m8f_tl_TradeView
{
  const leftTraderX  =  80;
  const rightTraderX = 240;

  const namesY     =   4;
  const namesColor = Font.CR_Gray;
  const itemsColor = Font.CR_Blue;
  const itemsColorSelected = Font.CR_Cyan;
  const itemsYStart = 30;

  m8f_tl_TradeView init(m8f_tl_TradeManager tradeManager)
  {
    _leftItemShift  = 0;
    _rightItemShift = 0;

    _isLeftSelected = true;

    _leftSelectedIndex  = 0;
    _rightSelectedIndex = 0;

    _tradeManager = tradeManager;

    return self;
  }

  void prepareShowing()
  {
    _leftItemShift  = 0;
    _rightItemShift = 0;
  }

  void show()
  {
    let virtualScreenSize = calculateVirtualScreenSize();

    showBackground(virtualScreenSize);

    showTrader( _tradeManager.getLeftTrader()
              , leftTraderX
              , virtualScreenSize
              , _leftSelectedIndex
              , _isLeftSelected
              );

    showTrader( _tradeManager.getRightTrader()
              , rightTraderX
              , virtualScreenSize
              , _rightSelectedIndex
              , !_isLeftSelected
              );
  }

  private m8f_tl_ScreenSize calculateVirtualScreenSize()
  {
    int virtualWidth;
    int virtualHeight;

    int targetWidth  = 320;
    int targetHeight = 200;
    double targetAspectRatio = double(targetWidth) / targetHeight;
    double screenAspectRatio = Screen.GetAspectRatio();

    if (screenAspectRatio > targetAspectRatio)
    {
      virtualHeight = targetHeight;
      virtualWidth  = targetHeight * targetAspectRatio;
    }
    else
    {
      virtualWidth  = targetWidth;
      virtualHeight = targetWidth / targetAspectRatio;
    }

    m8f_tl_ScreenSize result = new("m8f_tl_ScreenSize");
    result.width  = virtualWidth;
    result.height = virtualHeight;
    return result;
  }

  private void showBackground(m8f_tl_ScreenSize screenSize)
  {
    int       usetype = TexMan.Type_Any;
    int       flags   = TexMan.TryAny;
    TextureID backgroundTexture = TexMan.CheckForTexture("tl_back", usetype, flags);
    bool      animate = false;
    double    x       = 0.0;
    double    y       = 0.0;

    Screen.DrawTexture( backgroundTexture
                      , animate
                      , x
                      , y
                      , DTA_VirtualWidth,  screenSize.width
                      , DTA_VirtualHeight, screenSize.height
                      );
  }

  private void showTrader( m8f_tl_Trader     trader
                         , int               x
                         , m8f_tl_ScreenSize screenSize
                         , int               selectedIndex
                         , bool              isActive
                         )
  {
    double titleY     = namesY;
    Font   f          = SmallFont;
    double lineHeight = f.GetHeight() * 1.2;

    drawTextCenter( trader.getName()
                  , namesColor
                  , f
                  , x
                  , titleY
                  , screenSize.width
                  , screenSize.height
                  );
    titleY += lineHeight;

    string currency = trader.getCurrency();
    if (!trader.isInfiniteMoney())
    {
      int    leftCashAmount  = trader.getCashAmount();
      string leftCash        = String.Format("%s: %d", currency, leftCashAmount);
      drawTextCenter( leftCash
                    , namesColor
                    , f
                    , leftTraderX
                    , titleY
                    , screenSize.width
                    , screenSize.height
                    );
    }

    drawItemList(x, itemsYStart, trader, f, screenSize, lineHeight, selectedIndex, isActive);
  }

  void drawItemList( double x
                   , double y
                   , m8f_tl_Trader trader
                   , Font   f
                   , m8f_tl_ScreenSize screenSize
                   , double lineHeight
                   , int    selectedIndex
                   , bool   isActive
                   )
  {
    int itemsNumber = trader.getItemsNumber();

    for (int i = 0; i < itemsNumber; ++i)
    {
      let    item       = trader.getItem(i);
      int    color      = (i == selectedIndex && isActive) ? itemsColorSelected : itemsColor;
      string amount     = (item.amount == 1) ? "" : String.Format(" (x%d)", item.amount);
      int    price      = _tradeManager.getPrice(item);
      string itemString = String.Format("%s%s: %d", item.GetTag(), amount, price);

      drawTextCenter(itemString, color, f, x, y, screenSize.width, screenSize.height);

      y += lineHeight;
    }
  }

  bool isLeftSelected() const
  {
    return _isLeftSelected;
  }

  int getLeftSelectedIndex() const
  {
    return _leftSelectedIndex;
  }

  int getRightSelectedIndex() const
  {
    return _rightSelectedIndex;
  }

  void toggleLeftRightSelection()
  {
    _isLeftSelected = !_isLeftSelected;
  }

  void moveItemSelectionDown()
  {
    if (_isLeftSelected)
    {
      _leftSelectedIndex = min(_leftSelectedIndex + 1, _tradeManager.getLeftTrader().getItemsNumber() - 1);
    }
    else
    {
      _rightSelectedIndex = min(_rightSelectedIndex + 1, _tradeManager.getRightTrader().getItemsNumber() - 1);
    }
  }

  void moveItemSelectionUp()
  {
    if (_isLeftSelected)
    {
      _leftSelectedIndex = max(_leftSelectedIndex - 1, 0);
    }
    else
    {
      _rightSelectedIndex = max(_rightSelectedIndex - 1, 0);
    }
  }

  // private method section ////////////////////////////////////////////////////

  private void drawTextCenter( string text
                             , int    color
                             , Font   font
                             , double x
                             , double y
                             , int    virtualWidth
                             , int    virtualHeight
                             )
  {
    x -= font.StringWidth(text) / 2;

    Screen.DrawText( font
                   , color
                   , x
                   , y
                   , text
                   , DTA_VirtualWidth  , virtualWidth
                   , DTA_VirtualHeight , virtualHeight
                   );
  }

  // private attribute section /////////////////////////////////////////////////

  private int _leftItemShift;
  private int _rightItemShift;

  private bool _isLeftSelected;
  private int  _leftSelectedIndex;
  private int  _rightSelectedIndex;

  private m8f_tl_TradeManager _tradeManager;

} // class m8f_tl_TradeView
