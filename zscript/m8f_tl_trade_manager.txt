
class m8f_tl_CPT : m8f_tl_CurrencyPriceTable {}

class m8f_tl_TradeManager play
{

  // public: ///////////////////////////////////////////////////////////////////

  m8f_tl_TradeManager init(m8f_tl_CPT currencyPriceTable)
  {
    _isLoggingEnabled = true;

    _isStarted        = false;
    _leftTrader       = null;
    _rightTrader      = null;

    _currencyPriceTable = currencyPriceTable;

    return self;
  }

  void startTradeFor(string currency, Actor leftTrader, Actor rightTrader)
  {
    log(StringStruct.Format("trade started: %s with %s", leftTrader.getTag(), rightTrader.getTag()));

    _leftTrader  = new("m8f_tl_Trader").init(currency,  leftTrader, _currencyPriceTable);
    _rightTrader = new("m8f_tl_Trader").init(currency, rightTrader, _currencyPriceTable);

    bool isSuccess = (_leftTrader != null && _rightTrader != null);
    if (!isSuccess) { return; }

    //freezeTime();

    _isStarted = true;
    _currency  = currency;
  }

  void startTradeForPlayerAndTarget()
  {
    Actor playerActor = players[consolePlayer].mo;
    if (playerActor == null) { return; }

    Actor targetActor = playerActor.AimTarget();
    if (targetActor == null) { return; }

    //string currency = "Clip";
    string currency = "GoldWandAmmo";
    startTradeFor(currency, playerActor, targetActor);
  }

  void endTrade()
  {
    //unfreezeTime();

    _isStarted = false;
  }

  bool   isStarted()   const { return _isStarted; }
  string getCurrency() const { return _currency;  }

  m8f_tl_Trader getLeftTrader()  const { return _leftTrader;  }
  m8f_tl_Trader getRightTrader() const { return _rightTrader; }

  int getPrice(Actor a) const
  {
    return _currencyPriceTable.getPrice(_currency, a.GetClassName());
  }

  void makeTransaction(bool isLeftToRight, int leftIndex, int rightIndex)
  {
    Actor seller;
    Actor buyer;
    Actor item;
    bool  buyerIsInfiniteMoney;
    if (isLeftToRight)
    {
      if (!(0 <= leftIndex && leftIndex < _leftTrader.getItemsNumber())) { return; }

      seller = _leftTrader.getActor();
      buyer  = _rightTrader.getActor();
      buyerIsInfiniteMoney = _rightTrader.isInfiniteMoney();
      item   = _leftTrader.getItem(leftIndex);
    }
    else
    {
      if (!(0 <= rightIndex && rightIndex < _rightTrader.getItemsNumber())) { return; }

      seller = _rightTrader.getActor();
      buyer  = _leftTrader.getACtor();
      buyerIsInfiniteMoney = _leftTrader.isInfiniteMoney();
      item   = _rightTrader.getItem(rightIndex);
    }

    string className = item.GetClassName();
    int    price     = _currencyPriceTable.getPrice(_currency, className);
    if (buyer.CountInv(_currency) < price && !buyerIsInfiniteMoney)
    {
      console.printf("Not enough %s!", _currency);
      return;
    }

    seller.TakeInventory(className, 1);
    buyer.GiveInventory (className, 1);

    seller.GiveInventory(_currency, price);
    if (!buyerIsInfiniteMoney)
    {
      buyer.TakeInventory(_currency, price);
    }

    _leftTrader.refreshItemList();
    _rightTrader.refreshItemList();
  }

  // private: //////////////////////////////////////////////////////////////////

  private void log(string message) const
  {
    if (_isLoggingEnabled) { console.printf(message); }
  }

  // private: attributes ///////////////////////////////////////////////////////

  bool          _isLoggingEnabled;
  bool          _isStarted;
  m8f_tl_Trader _leftTrader;
  m8f_tl_Trader _rightTrader;
  m8f_tl_CPT    _currencyPriceTable;
  string        _currency;

} // class m8f_tl_TradeManager
